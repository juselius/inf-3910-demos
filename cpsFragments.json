{"codeFragments":[{"label":"five","content":"let five f = f 5\nfive string |> p"},{"label":"fiveCPS","content":"let five' = (|>) 5\nfive' string |> p"},{"label":"weird'n'wonder","content":"List.map ((|>) 2) [ (*) 2; (*) 3; (+) 42] |> p"},{"label":"Pythagoras","content":"let add = (+)\nlet square x = x * x\nlet pythagoras x y = add (square x) (square x)\npythagoras 2 3 |> p"},{"label":"PythagorasCPS","content":"let addCPS x y = fun f -> f (x + y)\nlet squareCPS x f =  f (x * x)\nlet pythagorasCPS x y f =\n  squareCPS x (fun x' ->\n  squareCPS y (fun y' ->\n  addCPS x' y' f))\npythagorasCPS 2 3 p"},{"label":"thrice","content":"let thrice f x = f (f (f x))\nlet thrice' f x = x |> f |> f |> f"},{"label":"thriceCPS","content":"let thriceCPS (f : 'a -> ('a -> 'r) -> 'r) (x : 'a) =\n  fun k ->\n    f x (fun fx ->\n    f fx ( fun ffx ->\n    f ffx k))\nthriceCPS (addCPS 2) 3 p"},{"label":"chain","content":"let chain\n  (s : ('a -> 'r) -> 'r)\n  (f : ('a -> ('b -> 'r) -> 'r))\n  = fun k -> s (fun x -> f x k)\n\nlet (>>=) = chain"},{"label":"thriceM","content":"let thriceM f x = (|>) x >>= f >>= f >>= f\nthriceM (addCPS 2) 3 p"},{"label":"Cont functor","content":"module Cont =\n    let map f x = fun g -> x (f >> g)\n    let ret x = fun f -> f x"},{"label":"ContBuilder","content":"type ContBuilder() =\n  member x.Bind(a,b) = a >>= b\n  member x.Return a = Cont.ret a\n  member x.ReturnFrom a = a\n\nlet cont = ContBuilder()"},{"label":"thriceCE","content":"let thriceCE f x =\n    cont {\n        let! x' = f x\n        let! x'' = f x'\n        return! f x''\n    }\nthriceCE (addCPS 2) 3 p"}]}