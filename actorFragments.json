{"codeFragments":[{"label":"ex1","content":"let actor1 = MailboxProcessor.Start (fun inbox ->\n    let mutable state = 0\n    let rec loop () =\n        async {\n            let! n = inbox.Receive ()\n            printfn \"received %d, state %d\" n state\n            state <- n\n            return! loop ()\n        }\n    loop ()\n    )\nactor1.Post 1\nactor1.Post 2"},{"label":"ex2","content":"let actor2 = MailboxProcessor.Start (fun inbox ->\n    let rec loop state =\n        async {\n            let! n = inbox.Receive ()\n            printfn \"received %d, state %d\" n state\n            return! loop (state + n)\n        }\n    loop 0\n    )\nactor2.Post 3\nactor2.Post 4"},{"label":"ex3","content":"let actor3 = MailboxProcessor.Start (fun (inbox : MailboxProcessor<AsyncReplyChannel<int> * int>) ->\n    let rec loop state =\n        async {\n            let! (reply, n) = inbox.Receive ()\n            reply.Reply state\n            return! loop (state + n)\n        }\n    loop 0\n    )\nactor3.PostAndReply (fun reply -> (reply, 21)) |> printfn \"reply: %d\"\nactor3.PostAndReply (fun reply -> (reply, 42)) |> printfn \"reply: %d\""},{"label":"ex4","content":"let actor4 = MailboxProcessor.Start (fun inbox ->\n    let mutable state = 0\n    let rnd = System.Random(1000)\n    let rec loop () =\n        async {\n            let! n = inbox.Receive ()\n            printf \"in %d \" state\n            state <- n + state\n            Thread.Sleep (rnd.Next ())\n            printfn \"out %d \" state\n            return! loop ()\n        }\n    loop ()\n)\n\nlet test4 () =\n    printfn \"Start\"\n    actor4.Post 1\n    actor4.Post 2\n    actor4.Post 3\n    printfn \"Sent\"\n    Thread.Sleep 5000\n    printfn \"Done\""},{"label":"ex5","content":"type Msg =\n    | Set of int\n    | Get of AsyncReplyChannel<int>\n\nlet actor5 = MailboxProcessor.Start (fun inbox ->\n    let mutable state = 0\n    let rec loopy () =\n        async {\n            match! inbox.Receive () with\n            | Set n -> state <- n + state\n            | Get reply -> reply.Reply state\n            return! loopy ()\n        }\n    loopy ()\n)\n\nlet test5 () =\n    printfn \"Start\"\n    [1..3]\n    |> List.iter (Set >> actor5.Post)\n    printfn \"Sent\"\n    let x = actor5.PostAndReply Get\n    printfn \"Done %d\" x"},{"label":"ex6","content":"let postAsync n = async { Set n |> actor5.Post }\n\nlet test6 () =\n    printfn \"Start\"\n    [1..3]\n    |> List.map postAsync\n    |> Async.Parallel\n    |> Async.RunSynchronously\n    |> ignore\n    printfn \"Sent\"\n    printfn \"Done\""}]}